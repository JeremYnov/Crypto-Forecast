version: "3.2"
services:
  ccxt-producer:
    container_name: ccxt-producer
    restart: on-failure
    command: python3 ./ccxt_producer.py
    build:
      dockerfile: ../../Dockerfile
      context: ./ccxt/producer
    volumes:
      - ./ccxt/producer:/usr/src
      - ./.env:/usr/src/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  ccxt-consumer:
    container_name: ccxt-consumer
    restart: on-failure
    command: python3 ./ccxt_consumer.py
    build:
      dockerfile: ../../Dockerfile
      context: ./ccxt/consumer
    depends_on:
      - mongo
      - ccxt-producer
    volumes:
      - ./ccxt/consumer:/usr/src
      - ./.env:/usr/src/.env
    networks:
      - kafka-network

  interface:
    container_name: interface
    command: streamlit run app.py
    build:
      dockerfile: ../Dockerfile
      context: ./interface
    volumes:
      - ./interface:/usr/src
    depends_on:
      - ccxt-producer
    networks:
      - kafka-network
    ports:
      - 8501:8501

  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    restart: unless-stopped
    command: mongod --auth
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: crypto-forecast
      MONGODB_DATA_DIR: /data/db
      MONGODB_LOG_DIR: /dev/null
    volumes:
      - mongo_db:/data/db
    networks:
      - kafka-network
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/
    networks:
      - kafka-network

  app:
    container_name: app
    restart: on-failure
    command: python3 app.py
    build:
      dockerfile: Dockerfile
      context: ./
    volumes:
      - .:/usr/src
      - .env:/usr/src/.env
    depends_on:
      - mongo
      - mongo-express
    networks:
      - kafka-network

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_CREATE_TOPICS: crypto_raw
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    healthcheck:
      test: ["CMD", "bash", "-c", "unset", "JMX_PORT", ";", "/bin/kafka-topics.sh", "--zookeeper", "zookeeper:2181", "--list"]
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - kafka-network
    ports:
      - 29092:29092
      - 9092:9092
      - 30001:30001

networks:
  kafka-network:
    driver: "bridge"

volumes:
  mongo_db:
